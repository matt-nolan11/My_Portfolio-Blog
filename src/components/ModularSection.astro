---
import { Image, getImage } from 'astro:assets';
import { marked } from 'marked';
import ProjectGallery from './ProjectGallery';
import ModelViewer from './ModelViewer';

// Helper function to optimize gallery images using Astro's image optimization
async function optimizeGalleryImages(gallery: any[]) {
  if (!gallery || gallery.length === 0) return [];
  
  return await Promise.all(
    gallery.map(async (image: any) => {
      try {
        const optimizedImage = await getImage({
          src: image.src,
          width: 800,
          height: 600,
          quality: 80,
          format: 'webp'
        });
        
        return {
          src: optimizedImage.src,
          alt: image.alt,
          caption: image.caption
        };
      } catch (error) {
        // Fallback to original image if optimization fails
        console.warn('Failed to optimize image:', image.src, error);
        return {
          src: image.src,
          alt: image.alt,
          caption: image.caption
        };
      }
    })
  );
}

// Pre-optimize gallery images for all sections
async function optimizeSectionGalleries(sections: any[]) {
  if (!sections || sections.length === 0) return sections;
  
  return await Promise.all(
    sections.map(async (section: any) => {
      const optimizedColumns = await Promise.all(
        section.columns.map(async (col: any) => {
          if (col.type === 'gallery' && col.gallery) {
            const optimizedGallery = await optimizeGalleryImages(col.gallery);
            return { ...col, gallery: optimizedGallery };
          }
          return col;
        })
      );
      return { ...section, columns: optimizedColumns };
    })
  );
}

// Optimize the sections
const { sections, depth = 0 } = Astro.props;

// Optimize the sections
const optimizedSections = await optimizeSectionGalleries(sections);

// Calculate appropriate heading levels based on nesting depth
const getHeadingLevel = (depth: number) => {
  if (depth === 0) return 'h2';
  if (depth === 1) return 'h3'; 
  if (depth === 2) return 'h4';
  if (depth === 3) return 'h5';
  return 'h6';
};

const getHeadingClass = (depth: number) => {
  if (depth === 0) return 'text-3xl font-bold mb-4';
  if (depth === 1) return 'text-2xl font-bold mb-4';
  if (depth === 2) return 'text-xl font-bold mb-4';
  if (depth === 3) return 'text-lg font-bold mb-3';
  return 'text-base font-bold mb-3';
};

const headingLevel = getHeadingLevel(depth);
const headingClass = getHeadingClass(depth);
---

<div class={`modular-sections ${depth === 0 ? 'space-y-12' : 'space-y-6'}`}>
  {optimizedSections.map((section: any, _i: number) => (
    <div class={`section gap-6 ${
      section.columns.length <= 2 ? 'flex flex-col lg:flex-row' :
      'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-' + section.columns.length
    }`}>
      {section.columns.map((col: any, _j: number) => (
        <div class={`column ${
          section.columns.length === 1 ? 'w-full' :
          section.columns.length === 2 ? 'lg:w-1/2' :
          'min-w-0' // Grid handles sizing for 3+ columns, min-w-0 prevents overflow
        }`}>
          {col.type === 'content' && (
            <>
              {col.title && (
                <Fragment>
                  {headingLevel === 'h2' && <h2 class={headingClass}>{col.title}</h2>}
                  {headingLevel === 'h3' && <h3 class={headingClass}>{col.title}</h3>}
                  {headingLevel === 'h4' && <h4 class={headingClass}>{col.title}</h4>}
                  {headingLevel === 'h5' && <h5 class={headingClass}>{col.title}</h5>}
                  {headingLevel === 'h6' && <h6 class={headingClass}>{col.title}</h6>}
                </Fragment>
              )}
              <div class="prose prose-lg max-w-none" set:html={marked(col.content || '')} />
            </>
          )}
          
          {col.type === 'image' && col.src && (
            <>
              <Image 
                src={col.src} 
                alt={col.alt || ''} 
                width={600} 
                height={400} 
                class="w-full h-auto rounded-lg shadow-lg" 
              />
              {col.caption && (
                <p class="text-sm text-base-content/60 mt-2 text-center">{col.caption}</p>
              )}
            </>
          )}
          
          {col.type === 'model' && col.modelSrc && (
            <>
              {col.title && (
                <Fragment>
                  {headingLevel === 'h2' && <h2 class={headingClass}>{col.title}</h2>}
                  {headingLevel === 'h3' && <h3 class={headingClass}>{col.title}</h3>}
                  {headingLevel === 'h4' && <h4 class={headingClass}>{col.title}</h4>}
                  {headingLevel === 'h5' && <h5 class={headingClass}>{col.title}</h5>}
                  {headingLevel === 'h6' && <h6 class={headingClass}>{col.title}</h6>}
                </Fragment>
              )}
              <ModelViewer
                src={col.modelSrc}
                alt={col.alt}
                poster={col.poster}
                environmentImage={col.environmentImage}
                caption={col.caption}
                autoRotate={col.modelOptions?.autoRotate}
                cameraControls={col.modelOptions?.cameraControls}
                ar={col.modelOptions?.ar}
                size={col.modelOptions?.size || 'medium'}
                exposureCompensation={col.modelOptions?.exposureCompensation}
                shadowIntensity={col.modelOptions?.shadowIntensity}
                shadowSoftness={col.modelOptions?.shadowSoftness}
                interactionPrompt={col.modelOptions?.interactionPrompt}
                loading={col.modelOptions?.loading}
                rotationPerSecond={col.modelOptions?.rotationPerSecond}
                autoRotateDelay={col.modelOptions?.autoRotateDelay}
                client:load
              />
            </>
          )}
          
          {col.type === 'gallery' && col.gallery && (
            <ProjectGallery
              images={col.gallery}
              autoplay={col.galleryOptions?.autoplay}
              autoplayInterval={col.galleryOptions?.autoplayInterval}
              showThumbnails={col.galleryOptions?.showThumbnails}
              size={col.galleryOptions?.size || 'medium'}
              client:load
            />
          )}
          
          {col.type === 'sections' && col.sections && (
            <div class={`nested-sections ${
              depth > 0 ? 'border-l-4 border-base-300/30 pl-6 ml-2 mt-4' : 'mt-6'
            }`}>
              <Astro.self 
                sections={col.sections} 
                depth={depth + 1} 
              />
            </div>
          )}
        </div>
      ))}
    </div>
  ))}
</div>