---
import { Image } from "astro:assets";
import logo from "../assets/logo.svg";
import Search from "astro-pagefind/components/Search";
import { MagnifyingGlassIcon, Bars3Icon, XMarkIcon } from "@heroicons/react/24/outline";
import ThemeToggle from '../components/ThemeToggle.astro';
---

<header class="sticky top-0 z-50 bg-base-100 navbar-header" id="main-header">
  <!-- Mobile Navigation -->
  <nav class="navbar lg:hidden bg-base-100 w-full px-2">
    <div class="flex-none">
      <label for="nav-drawer" aria-label="Open sidebar" class="btn btn-ghost btn-square drawer-button">
        <Bars3Icon className="h-5 w-5" />
      </label>
    </div>
    <!-- Centered Logo -->
    <a href="/" class="absolute left-1/2 -translate-x-1/2 flex items-center">
      <Image src={logo} alt="Matt Nolan's logo" class="h-12 w-auto" />
    </a>
    <!-- Mobile Right Section -->
    <div class="flex-none ml-auto space-x-1">
      <button aria-label="Open search" class="btn btn-ghost btn-square" onclick="search_modal.showModal()">
        <MagnifyingGlassIcon className="h-5 w-5" />
      </button>
      <ThemeToggle />
    </div>
  </nav>

  <!-- Desktop Navigation -->
  <nav class="navbar hidden lg:flex w-full bg-base-100">
    <div class="max-w-7xl mx-auto px-4 w-full flex items-center">
      <!-- Logo Section -->
      <div class="flex-shrink-0 mr-6">
        <a href="/" class="flex items-center gap-2">
          <Image src={logo} alt="Matt Nolan's logo" class="h-10 w-auto" />
          <span class="text-xl font-bold whitespace-nowrap">Matt Nolan's Portfolio</span>
        </a>
      </div>
      
      <!-- Spacer -->
      <div class="flex-1"></div>
      
      <!-- Navigation Menu -->
      <ul class="menu menu-horizontal flex-shrink-0 mr-4">
        <li><a href="/about" class="normal-case font-bold text-lg px-3">About</a></li>
        <li><a href="/projects" class="normal-case font-bold text-lg px-3">Projects</a></li>
        <li><a href="/posts" class="normal-case font-bold text-lg px-3">Posts</a></li>
        <li><a href="/tags" class="normal-case font-bold text-lg px-3">Tags</a></li>
      </ul>
      
      <!-- Search and Theme Section -->
      <div class="flex items-center space-x-3 flex-shrink-0">
        <!-- Search Container -->
        <div class="search-wrapper">
          <Search
            id="search"
            className="pagefind-ui"
            uiOptions={{ showImages: false }}
          />
        </div>
        
        <!-- Theme Toggle -->
        <ThemeToggle />
      </div>
    </div>
  </nav>
</header>

<!-- Search modal for mobile -->
<dialog id="search_modal" class="modal lg:hidden">
  <div class="modal-box w-11/12 max-w-2xl h-[90vh] overflow-y-auto flex flex-col relative">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" aria-label="Close search">
        <XMarkIcon className="h-5 w-5" />
      </button>
    </form>
    <div class="relative">
      <Search
        id="mobile-search"
        className="pagefind-ui w-full mt-8 mb-2"
        uiOptions={{ showImages: false }}
      />
    </div>
  </div>
</dialog>

<script>
  // Simple header scroll effects
  function updateHeaderOnScroll() {
    const header = document.getElementById('main-header');
    if (!header) return;

    // Check if drawer is open - if so, don't modify header styling
    const drawerToggle = document.getElementById('nav-drawer') as HTMLInputElement;
    if (drawerToggle && drawerToggle.checked) {
      return; // Skip header updates when drawer is open
    }

    const scrollY = window.scrollY;
    const threshold = 20;

    if (scrollY > threshold) {
      header.classList.add('header-scrolled');
      // Set border color based on theme
      if (document.documentElement.getAttribute('data-theme') === 'business') {
        header.style.borderBottomColor = 'rgba(147, 197, 253, 0.4)';
      } else {
        header.style.borderBottomColor = 'rgba(30, 41, 59, 0.7)';
      }
    } else {
      header.classList.remove('header-scrolled');
      header.style.borderBottomColor = 'transparent';
    }
  }

  // Throttled scroll listener
  let ticking = false;
  function handleScroll() {
    if (!ticking) {
      requestAnimationFrame(() => {
        updateHeaderOnScroll();
        ticking = false;
      });
      ticking = true;
    }
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    updateHeaderOnScroll();
    window.addEventListener('scroll', handleScroll);
    
    // Listen for theme changes
    const observer = new MutationObserver(updateHeaderOnScroll);
    observer.observe(document.documentElement, { 
      attributes: true, 
      attributeFilter: ['data-theme'] 
    });

    // Enhanced window resize handling with smooth content transitions
    let resizeTimeout: number;
    let isResizing = false;
    
    function handleResizeStart() {
      if (!isResizing) {
        isResizing = true;
        document.body.classList.add('window-resizing');
      }
      
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        isResizing = false;
        document.body.classList.remove('window-resizing');
      }, 800);
    }
    
    window.addEventListener('resize', handleResizeStart);
    
    // Also add orientationchange for mobile devices
    window.addEventListener('orientationchange', handleResizeStart);

    // Handle mobile drawer to prevent navbar jumping
    const drawerToggle = document.getElementById('nav-drawer') as HTMLInputElement;
    const drawerLinks = document.querySelectorAll('.drawer-side a');
    const header = document.getElementById('main-header');
    
    if (drawerToggle && header) {
      // Listen for drawer state changes
      drawerToggle.addEventListener('change', () => {
        if (drawerToggle.checked) {
          // Drawer opening - fix header position to prevent jumping
          const headerHeight = header.offsetHeight;
          const currentScrollY = window.scrollY;
          
          // Store current styling before modification
          const currentBorderColor = header.style.borderBottomColor || 'transparent';
          const currentBgColor = header.style.backgroundColor || '';
          const hasScrolledClass = header.classList.contains('header-scrolled');
          
          // Fix header position
          header.style.cssText = `
            position: fixed !important;
            top: 0px !important;
            left: 0px !important;
            right: 0px !important;
            width: 100% !important;
            z-index: 40 !important;
            transform: translateY(0) !important;
            opacity: 1 !important;
            visibility: visible !important;
            border-bottom-width: 3px !important;
            border-bottom-style: solid !important;
            border-bottom-color: ${currentBorderColor} !important;
            background-color: ${currentBgColor} !important;
          `;
          
          // Re-apply classes that might have been lost
          if (hasScrolledClass) {
            header.classList.add('header-scrolled');
          }
          
          // Prevent content shift by adding padding to body
          document.body.style.paddingTop = `${headerHeight}px`;
          
        } else {
          // Drawer closing - restore original positioning
          
          // Store current styling before reset
          const currentBorderColor = header.style.borderBottomColor;
          const currentBgColor = header.style.backgroundColor;
          const hasScrolledClass = header.classList.contains('header-scrolled');
          
          // Reset positioning styles
          header.style.position = '';
          header.style.top = '';
          header.style.left = '';
          header.style.right = '';
          header.style.width = '';
          header.style.zIndex = '';
          header.style.transform = '';
          header.style.opacity = '';
          header.style.visibility = '';
          
          // Restore styling
          if (currentBorderColor) header.style.borderBottomColor = currentBorderColor;
          if (currentBgColor) header.style.backgroundColor = currentBgColor;
          
          // Restore classes
          if (hasScrolledClass) {
            header.classList.add('header-scrolled');
          }
          
          // Remove body padding
          document.body.style.paddingTop = '';
          
          // Update header styling based on current scroll position
          setTimeout(() => {
            updateHeaderOnScroll();
          }, 100);
        }
      });
    }
    
    // Close drawer when clicking menu links
    drawerLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (drawerToggle) {
          drawerToggle.checked = false;
        }
      });
    });
  });
</script>

<style>
  /* Header base styles */
  .navbar-header {
    border-bottom: 3px solid transparent;
    transition: border-bottom-color 0.3s ease, box-shadow 0.3s ease;
  }

  /* Scrolled state */
  .header-scrolled {
    backdrop-filter: blur(8px);
    box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.15);
  }

  /* Theme-specific scrolled backgrounds */
  [data-theme="business"] .header-scrolled {
    background-color: rgba(100, 116, 139, 0.95);
  }

  [data-theme="corporate"] .header-scrolled {
    background-color: rgba(255, 255, 255, 0.95);
  }

  /* Search wrapper with responsive scaling */
  .search-wrapper {
    width: clamp(200px, 25vw, 300px);
    max-width: 300px;
    min-width: 200px;
  }

  /* Force pagefind components to respect container width - override global styles */
  .search-wrapper .pagefind-ui {
    width: 100% !important;
    max-width: 100% !important;
    min-width: 100% !important;
  }

  .search-wrapper .pagefind-ui__form {
    width: 100% !important;
    max-width: 100% !important;
    min-width: 100% !important;
  }

  .search-wrapper .pagefind-ui__search-input {
    width: 100% !important;
    max-width: 100% !important;
    min-width: 100% !important;
    box-sizing: border-box !important;
  }

  /* Additional specificity to override global pagefind styles */
  .navbar .search-wrapper .pagefind-ui {
    width: 100% !important;
  }

  .navbar .search-wrapper .pagefind-ui__form {
    width: 100% !important;
  }

  .navbar .search-wrapper .pagefind-ui__search-input {
    width: 100% !important;
  }

  /* Responsive breakpoints */
  @media (max-width: 1400px) {
    .search-wrapper {
      width: clamp(180px, 22vw, 260px);
    }
  }

  @media (max-width: 1200px) {
    .search-wrapper {
      width: clamp(160px, 20vw, 220px);
    }
  }

  @media (max-width: 1024px) {
    .search-wrapper {
      width: clamp(140px, 18vw, 200px);
    }
  }

  /* Ensure proper spacing and prevent overlap */
  .navbar .flex.items-center.space-x-3 {
    gap: 0.75rem;
  }

  /* Mobile styles remain unchanged */
  @media (max-width: 1023px) {
    .search-wrapper {
      display: none;
    }
  }
</style>